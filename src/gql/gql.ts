/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n  query GetAllHands {\n    hands {\n      id\n      title\n      content\n      es\n      user_id\n      created_at\n      updated_at\n      actions(order_by: { street: asc, order: asc }) {\n        id\n        hand_id\n        position\n        move\n        size\n        street\n        order\n        created_at\n        updated_at\n      }\n\n      hands_cards(order_by: { order: asc }) {\n        card {\n          id\n          num\n          mark\n        }\n        order\n      }\n      pots {\n        id\n        hand_id\n        size\n        street\n      }\n    }\n  }\n": types.GetAllHandsDocument,
    "\n  mutation InsertHand(\n    $object: hands_insert_input!\n    $on_conflict: hands_on_conflict\n  ) {\n    insert_hands_one(object: $object, on_conflict: $on_conflict) {\n      id\n      title\n      content\n      es\n      user_id\n      created_at\n      updated_at\n      actions(order_by: { street: asc, order: asc }) {\n        id\n        hand_id\n        position\n        move\n        size\n        order\n        street\n        created_at\n        updated_at\n      }\n      hands_cards(order_by: { order: asc }) {\n        card {\n          id\n          num\n          mark\n        }\n        order\n      }\n      pots {\n        id\n        hand_id\n        size\n        street\n      }\n    }\n  }\n": types.InsertHandDocument,
};

export function graphql(source: "\n  query GetAllHands {\n    hands {\n      id\n      title\n      content\n      es\n      user_id\n      created_at\n      updated_at\n      actions(order_by: { street: asc, order: asc }) {\n        id\n        hand_id\n        position\n        move\n        size\n        street\n        order\n        created_at\n        updated_at\n      }\n\n      hands_cards(order_by: { order: asc }) {\n        card {\n          id\n          num\n          mark\n        }\n        order\n      }\n      pots {\n        id\n        hand_id\n        size\n        street\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAllHands {\n    hands {\n      id\n      title\n      content\n      es\n      user_id\n      created_at\n      updated_at\n      actions(order_by: { street: asc, order: asc }) {\n        id\n        hand_id\n        position\n        move\n        size\n        street\n        order\n        created_at\n        updated_at\n      }\n\n      hands_cards(order_by: { order: asc }) {\n        card {\n          id\n          num\n          mark\n        }\n        order\n      }\n      pots {\n        id\n        hand_id\n        size\n        street\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation InsertHand(\n    $object: hands_insert_input!\n    $on_conflict: hands_on_conflict\n  ) {\n    insert_hands_one(object: $object, on_conflict: $on_conflict) {\n      id\n      title\n      content\n      es\n      user_id\n      created_at\n      updated_at\n      actions(order_by: { street: asc, order: asc }) {\n        id\n        hand_id\n        position\n        move\n        size\n        order\n        street\n        created_at\n        updated_at\n      }\n      hands_cards(order_by: { order: asc }) {\n        card {\n          id\n          num\n          mark\n        }\n        order\n      }\n      pots {\n        id\n        hand_id\n        size\n        street\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InsertHand(\n    $object: hands_insert_input!\n    $on_conflict: hands_on_conflict\n  ) {\n    insert_hands_one(object: $object, on_conflict: $on_conflict) {\n      id\n      title\n      content\n      es\n      user_id\n      created_at\n      updated_at\n      actions(order_by: { street: asc, order: asc }) {\n        id\n        hand_id\n        position\n        move\n        size\n        order\n        street\n        created_at\n        updated_at\n      }\n      hands_cards(order_by: { order: asc }) {\n        card {\n          id\n          num\n          mark\n        }\n        order\n      }\n      pots {\n        id\n        hand_id\n        size\n        street\n      }\n    }\n  }\n"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;